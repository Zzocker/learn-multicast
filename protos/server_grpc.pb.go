// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: server.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MulticastClient is the client API for Multicast service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MulticastClient interface {
	Set(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Empty, error)
	Get(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Data, error)
}

type multicastClient struct {
	cc grpc.ClientConnInterface
}

func NewMulticastClient(cc grpc.ClientConnInterface) MulticastClient {
	return &multicastClient{cc}
}

func (c *multicastClient) Set(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Multicast/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multicastClient) Get(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/Multicast/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MulticastServer is the server API for Multicast service.
// All implementations must embed UnimplementedMulticastServer
// for forward compatibility
type MulticastServer interface {
	Set(context.Context, *Data) (*Empty, error)
	Get(context.Context, *Empty) (*Data, error)
	mustEmbedUnimplementedMulticastServer()
}

// UnimplementedMulticastServer must be embedded to have forward compatible implementations.
type UnimplementedMulticastServer struct {
}

func (UnimplementedMulticastServer) Set(context.Context, *Data) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedMulticastServer) Get(context.Context, *Empty) (*Data, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedMulticastServer) mustEmbedUnimplementedMulticastServer() {}

// UnsafeMulticastServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MulticastServer will
// result in compilation errors.
type UnsafeMulticastServer interface {
	mustEmbedUnimplementedMulticastServer()
}

func RegisterMulticastServer(s grpc.ServiceRegistrar, srv MulticastServer) {
	s.RegisterService(&Multicast_ServiceDesc, srv)
}

func _Multicast_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MulticastServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Multicast/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MulticastServer).Set(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _Multicast_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MulticastServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Multicast/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MulticastServer).Get(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Multicast_ServiceDesc is the grpc.ServiceDesc for Multicast service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Multicast_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Multicast",
	HandlerType: (*MulticastServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Set",
			Handler:    _Multicast_Set_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Multicast_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
